[{"name":"cli","has_issues":true,"issues":[{"title":"Verify version compatibility with the Scanner payload","created_at":"2021-01-29T21:06:14Z","body":"Hello ðŸ‘‹ \r\n\r\nThe goal of the task is to use the root property `scannerVersion` of the scanner version and make sure that it's compatible with the CLI (by using a SemVer range).\r\n","assignee":null}],"issues_length":1},{"name":"report","has_issues":true,"issues":[{"title":"Fixing puppeteer HTML to PDF conversion","created_at":"2023-01-17T23:38:33Z","body":"Hello :wave:\r\n\r\nWith current version of puppeteer the PDF generation seems to be broken (There is probably parameters to review and maybe also CSS print rules to refactor?)\r\n\r\n![image](https://user-images.githubusercontent.com/4438263/213035958-d54bfbc9-5e16-43e5-8763-ac96b8177be4.png)\r\n","assignee":null}],"issues_length":1},{"name":"js-x-ray","has_issues":true,"issues":[{"title":"Detect shady links ","created_at":"2023-01-12T23:13:24Z","body":"My idea of this task is to implement a new warning responsible of detecting shady links in Literals. I have been inspired by one of the detection of [guarddog](https://github.com/DataDog/guarddog) from DataDog.\r\n\r\nThey use the following RegEx:\r\n`(http[s]?:\\/\\/.*\\.(link|xyz|tk|ml|ga|cf|gq|pw|top|club|mw|bd|ke|am|sbs|date|quest|cd|bid|cd|ws|icu|cam|uno|email|stream)\\/)`\r\n\r\nMaybe we need to conduct additional research on the subject (maybe there is some study we may want to read to improve the detection?).","assignee":null}],"issues_length":1},{"name":"scanner","has_issues":true,"issues":[{"title":"Implement SAST warnings for SemVer 0.0.0","created_at":"2023-01-12T23:08:17Z","body":"Implement a warning for package.json with version equal to zero:\r\n\r\n- `0.0.0`\r\n- `0.0`\r\n- `0`\r\n\r\nMy idea is to dynamically inject an \"Information\" SAST warning. It just mean the source is not JS-X-Ray but Scanner (we must check what's the impact of that).","assignee":null},{"title":"Difference between two payloads (new API)","created_at":"2022-10-09T12:40:18Z","body":"Hello ðŸ‘‹\r\n\r\nThe goal of the feature is to compare two scanner payloads (one older and one recent) and get **informations** and **delta** between them. A feature like this could be very useful in a tool like [CI](https://github.com/NodeSecure/ci).\r\n\r\nFor example, to find out if new licences have appeared in between. But we can apply this principle to several other elements:\r\n\r\n- New maintainers (or some has been removed since).\r\n- New dependencies added\r\n\r\nTo date I do not know what would be the ideal approach to develop this feature. Do not hesitate to give ideas!","assignee":null}],"issues_length":2},{"name":"npm-registry-sdk","has_issues":true,"issues":[{"title":"chore: fix tests and enable CI","created_at":"2022-06-16T21:44:57Z","body":"As mentioned in #23 \r\n\r\n* fix that previously used `jest.mock`\r\n* enable `--parallel` from `mocha`\r\n* enable CI","assignee":null}],"issues_length":1},{"name":"vulnera","has_issues":true,"issues":[{"title":"Allow npm strategy to work with pnpm","created_at":"2022-10-23T19:06:15Z","body":"Currently, the `npm` strategy only works for `package-lock.json` and `npm-shrinkwrap.json` lock files. \r\n\r\nWe could actually extend that to `pnpm-lock.yaml` using the `npm` strategy using programmatically the [library provided by the pnpm organization](https://www.npmjs.com/package/@pnpm/audit) which uses the same vulnerability registry.\r\n\r\nIt would allow us to enhance the compatibility of the `npm` strategy (pnpm + npm would be both supported).","assignee":{"login":"DGouron","id":10566637,"node_id":"MDQ6VXNlcjEwNTY2NjM3","avatar_url":"https://avatars.githubusercontent.com/u/10566637?v=4","gravatar_id":"","url":"https://api.github.com/users/DGouron","html_url":"https://github.com/DGouron","followers_url":"https://api.github.com/users/DGouron/followers","following_url":"https://api.github.com/users/DGouron/following{/other_user}","gists_url":"https://api.github.com/users/DGouron/gists{/gist_id}","starred_url":"https://api.github.com/users/DGouron/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DGouron/subscriptions","organizations_url":"https://api.github.com/users/DGouron/orgs","repos_url":"https://api.github.com/users/DGouron/repos","events_url":"https://api.github.com/users/DGouron/events{/privacy}","received_events_url":"https://api.github.com/users/DGouron/received_events","type":"User","site_admin":false}},{"title":"Finalize the implementation of the Sonatype strategy by implementing API payload and rate limits","created_at":"2022-05-01T18:56:52Z","body":"For now, the strategy around Sonatype is not taking into account rate and payload limits imposed by the API.\r\n\r\n- ### Payload limit \r\nWhen requesting multiple `components`, there is a payload limit of 128 components per requests). Given that a project might contains thousands of dependencies, we must provide a way to batch requests respecting taking care of that limit.\r\n\r\n**Issue:**\r\nFor now, all the dependencies found from the scanner are provided [in the body of the request here ](https://github.com/NodeSecure/vuln/blob/8bc814349b3fe9615373ee0f7e14537de9752cc6/src/strategies/sonatype.js#L54). This is problematic because when dealing with a lot of dependencies, there is at the moment only one http request fired with all the dependencies, whereas we should batch X requests which each containing a maximum of 128 dependencies by payload. When providing more than 128 components per request, the API responds with an error. \r\n\r\n**Goal:**\r\nTake for instance an array of [package urls](https://github.com/package-url/purl-spec) with 130 `components` (130 dependencies formatted as package urls). The goal is the create from this array `chunks` of size **128** and to fire an HTTP request to the API with each chunk.\r\nIn this example we would have:\r\n- 1 HTTP request with components from 1 to 128\r\n- 1 HTTP request with components from 128 to 130\r\n\r\n- ### API rate limit\r\n\r\nProbably needs an implementation using `@myunisoft/httpie`.\r\n\r\n**Issue:**\r\nNothing specific with `vuln` here, but the interactions with the Sonatype API should handle _rate limit_ through the use of the `@myunisoft/httpie` http client. Without throttling requests, we are sure to exceed the rate limit of the API. \r\n\r\n**Goal:**\r\nUse `@myunisoft/httpie` to configure _rate limit_, [there is an example here](https://github.com/MyUnisoft/httpie/blob/master/examples/ratelimit.mjs) ","assignee":{"login":"AntonioliBenjamin","id":111560667,"node_id":"U_kgDOBqZH2w","avatar_url":"https://avatars.githubusercontent.com/u/111560667?v=4","gravatar_id":"","url":"https://api.github.com/users/AntonioliBenjamin","html_url":"https://github.com/AntonioliBenjamin","followers_url":"https://api.github.com/users/AntonioliBenjamin/followers","following_url":"https://api.github.com/users/AntonioliBenjamin/following{/other_user}","gists_url":"https://api.github.com/users/AntonioliBenjamin/gists{/gist_id}","starred_url":"https://api.github.com/users/AntonioliBenjamin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/AntonioliBenjamin/subscriptions","organizations_url":"https://api.github.com/users/AntonioliBenjamin/orgs","repos_url":"https://api.github.com/users/AntonioliBenjamin/repos","events_url":"https://api.github.com/users/AntonioliBenjamin/events{/privacy}","received_events_url":"https://api.github.com/users/AntonioliBenjamin/received_events","type":"User","site_admin":false}},{"title":"Make the API work for a given manifest path (or payload).","created_at":"2022-04-19T16:02:25Z","body":"Vuln is originally designed to work with NodeSecure/scanner. However i would like to expand the API to allow any third-party codes to use this package.\r\n\r\nThe hydratePayloadDependencies method is very specialized for the Scanner. One of my idea is to provide a new method to allow to launch an analysis on a given manifest (package.json). We could ask for a path or even a manifest payload.\r\n\r\nHowever all strategies may not work well with this (Node.js Security WG for example). But we can work step by step to provide support and find solutions for those strategies (no need to rush).\r\n\r\n","assignee":null}],"issues_length":3},{"name":"vis-network","has_issues":true,"issues":[{"title":"Add tests ","created_at":"2022-06-20T07:37:29Z","body":"We'd like to have tests on this repository ðŸ§ª \r\n\r\nAs much as possible we'd like to use:\r\n- `tape` or `node-tap` (`node-tap` is my new goto)\r\n- have two scripts\r\n  - one for running all tests once\r\n  - one for running tests in watch mode\r\n- execute the first script in the CI on node 18.x and the LTS.\r\n- coverage is a plus","assignee":null}],"issues_length":1},{"name":"authors","has_issues":true,"issues":[{"title":"Revamp tests","created_at":"2022-08-13T18:14:30Z","body":"Our tests must be refacto, we must execute `temp.js` to create the nsecure-result.json which will be analyzed by the package.\r\n\r\nWe want to remove this file and include the step in our tests.\r\n\r\nThe second improvement consist in what Rossbob told me in another PR\r\n____________\r\n\r\nI would have added some tests over rewriting it :\r\n- one without any options (flags & domainInformations)\r\n- one with flags\r\n- one with domainInformations\r\n\r\nbut it may be overkill\r\n\r\n_Originally posted by @Rossb0b in https://github.com/NodeSecure/authors/pull/12#pullrequestreview-1066608856_","assignee":null},{"title":"Inactive Maintainer (or Publisher ?)","created_at":"2022-04-03T10:33:52Z","body":"It would be relevant to know if a maintainer is still active on npm. This would probably only be possible if the person has already published a package.\r\n\r\nFor example, we could consider that someone who has published in the past but nothing within three years would be considered as not active.\r\n\r\nAny help or opinions are welcome.","assignee":{"login":"Rossb0b","id":39910164,"node_id":"MDQ6VXNlcjM5OTEwMTY0","avatar_url":"https://avatars.githubusercontent.com/u/39910164?v=4","gravatar_id":"","url":"https://api.github.com/users/Rossb0b","html_url":"https://github.com/Rossb0b","followers_url":"https://api.github.com/users/Rossb0b/followers","following_url":"https://api.github.com/users/Rossb0b/following{/other_user}","gists_url":"https://api.github.com/users/Rossb0b/gists{/gist_id}","starred_url":"https://api.github.com/users/Rossb0b/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Rossb0b/subscriptions","organizations_url":"https://api.github.com/users/Rossb0b/orgs","repos_url":"https://api.github.com/users/Rossb0b/repos","events_url":"https://api.github.com/users/Rossb0b/events{/privacy}","received_events_url":"https://api.github.com/users/Rossb0b/received_events","type":"User","site_admin":false}}],"issues_length":2},{"name":"rc","has_issues":true,"issues":[{"title":"In-memory/memoize payload API","created_at":"2022-08-29T12:57:44Z","body":"I think it might be nice to have an in-memory API for RC. This would simplify implementations on some projects that are spread over several packages.\r\n\r\nExample of two new API:\r\n- .memoize()\r\n- .memoized() \r\n\r\n```ts\r\nconst configurationPayload = (\r\n    await RC.read(void 0, { createMode: \"ci\" })\r\n).unwrap();\r\n\r\n/**\r\n * OVERWRITE [TRUE]: Overwrite the previous memoized payload\r\n * OVERWRITE [FALSE]: Merge with the previous memoized payload\r\n */\r\nRC.memoize(configurationPayload, { overwrite: false });\r\n\r\nconst result = RC.memoized({\r\n    default: {}\r\n}).unwrap();\r\n```\r\n\r\nAutomatically memoize using .read() API:\r\n```ts\r\nconst configurationPayload = (\r\n    await RC.read(void 0, { createMode: \"ci\", memoize: true })\r\n).unwrap();\r\n\r\nconst result = RC.memoized({\r\n    default: {}\r\n}).unwrap();\r\n```\r\n\r\n> **Note**: The default options allow to set a default value if there is no memoized value.","assignee":{"login":"fabnguess","id":72697416,"node_id":"MDQ6VXNlcjcyNjk3NDE2","avatar_url":"https://avatars.githubusercontent.com/u/72697416?v=4","gravatar_id":"","url":"https://api.github.com/users/fabnguess","html_url":"https://github.com/fabnguess","followers_url":"https://api.github.com/users/fabnguess/followers","following_url":"https://api.github.com/users/fabnguess/following{/other_user}","gists_url":"https://api.github.com/users/fabnguess/gists{/gist_id}","starred_url":"https://api.github.com/users/fabnguess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fabnguess/subscriptions","organizations_url":"https://api.github.com/users/fabnguess/orgs","repos_url":"https://api.github.com/users/fabnguess/repos","events_url":"https://api.github.com/users/fabnguess/events{/privacy}","received_events_url":"https://api.github.com/users/fabnguess/received_events","type":"User","site_admin":false}}],"issues_length":1},{"name":"ci","has_issues":true,"issues":[{"title":"test: add e2e testing","created_at":"2022-07-02T18:07:22Z","body":"## Context \r\n\r\nWe don't have a clear way to execute e2e testing. So basically, we create a new repository and link the dependency through `npm link`, then we could execute `nsci run` and make manual assertions.\r\n\r\n## Goal\r\n\r\nHave a suite of abstracts to execute e2e tests. \r\n\r\n### Requirements\r\n- have a dedicated npm script to run them: `npm run test:e2e`\r\n- implement tests for basics scenarios\r\n- add a section in the `CONTRIBUTING.md` to help newcomers","assignee":null},{"title":"Add capability to display all types of warnings handled and their definitions (security for dummies)","created_at":"2022-03-17T22:44:59Z","body":"Initially suggested by @RomainLanz\r\n\r\nWe are introducing a way to configure specifically `warnings`  through a `.nodesecurerc` file (#3). \r\n\r\nHowever, those warnings meanings and consequences are not easy to understand though. \r\n@fraxken already initiated the work and added a _Warnings Legends_ in the [README.md of the @nodesecure/js-x-ray package](https://github.com/NodeSecure/js-x-ray).\r\n\r\n#### How to retrieve these legends ?\r\n\r\nAt the beginning, we could imagine a static data structure to include these __Warnings Legends__ in the library. However this does not scale well, as it could introduce differences when adding more warnings to ` js-x-ray`.\r\n\r\n#### How to display these legends ?\r\n\r\nThe goal would be to access those legends directly from `@nodesecure/ci` using either:\r\n- the CLI, by using a custom command printing the legends. **table** dependency could be used (waiting for #3)\r\n- via a static web page referencing these legends and in-depth ressources. The web page could be hosted via a local server.\r\n\r\n","assignee":null}],"issues_length":2}]